# Copyright (c) 2019 Michael Vilim
#
# This file is part of the taserver-linux library. It is currently hosted at
# https://github.com/mvilim/taserver-linux
#
# taserver-linux is licensed under the AGPL. A copy of the license can be
# found in the root folder of the project.

From 3dee5f0275174f195523bdde6d5c48182e3fe9b1 Mon Sep 17 00:00:00 2001
From: Michael Vilim <michael.vilim@gmail.com>
Date: Fri, 15 Feb 2019 08:58:59 -0600
Subject: [PATCH 2/4] Add support for configured internal and external ips

---
 game_server_launcher/launcher.py | 41 +++++++++++++++++++++-----------
 1 file changed, 27 insertions(+), 14 deletions(-)

diff --git a/game_server_launcher/launcher.py b/game_server_launcher/launcher.py
index 35dc188..156d7df 100644
--- a/game_server_launcher/launcher.py
+++ b/game_server_launcher/launcher.py
@@ -24,6 +24,8 @@ import logging
 from gevent import socket
 import urllib.request as urlreq
 
+import ipaddress
+
 from common.errors import FatalError
 from common.firewall import reset_firewall, modify_firewall
 from common.ipaddresspair import IPAddressPair
@@ -75,22 +77,33 @@ class Launcher:
         self.last_server_ready_message = None
         self.last_match_end_message = None
 
-        self.address_pair, errormsg = IPAddressPair.detect()
-
-        if not self.address_pair.external_ip:
-            self.logger.warning('Unable to detect public IP address: %s\n'
-                                'This will cause problems if the login server '
-                                'or any of your players are not on your LAN.' % errormsg)
+        detected_address_pair, errormsg = IPAddressPair.detect()
+        external_ip = game_server_config.get('external_ip', None)
+        if not external_ip:
+            external_ip = detected_address_pair.external_ip
+            if not external_ip:
+                self.logger.warning('Unable to detect public IP address: %s\n'
+                                    'This will cause problems if the login server '
+                                    'or any of your players are not on your LAN.' % errormsg)
+            self.logger.info('launcher: detected external IP: %s' % external_ip)
         else:
-            self.logger.info('launcher: detected external IP: %s' % self.address_pair.external_ip)
-
-        if not self.address_pair.internal_ip:
-            self.logger.warning('You appear to be running the game server on a machine '
-                                'directly connected to the internet. This is will cause '
-                                'problems if the login server or any of your players '
-                                'are on your LAN.')
+            external_ip = ipaddress.IPv4Address(external_ip)
+            self.logger.info('launcher: configured external IP: %s' % external_ip)
+
+        internal_ip = game_server_config.get('internal_ip', None)
+        if not internal_ip:
+            internal_ip = detected_address_pair.internal_ip
+            if not internal_ip:
+                self.logger.warning('You appear to be running the game server on a machine '
+                                    'directly connected to the internet. This is will cause '
+                                    'problems if the login server or any of your players '
+                                    'are on your LAN.')
+            self.logger.info('launcher: detected internal IP: %s' % internal_ip)
         else:
-            self.logger.info('launcher: detected internal IP: %s' % self.address_pair.internal_ip)
+            internal_ip = ipaddress.IPv4Address(internal_ip)
+            self.logger.info('launcher: configured internal IP: %s' % internal_ip)
+
+        self.address_pair = IPAddressPair(external_ip, internal_ip)
 
         self.message_handlers = {
             PeerConnectedMessage: self.handle_peer_connected,
-- 
2.20.1

